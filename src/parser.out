Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EMPTY_ARRAY
    MUTABLE
    STRING_TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> assignment
Rule 5     statement -> print_statement
Rule 6     statement -> if_statement
Rule 7     statement -> while_statement
Rule 8     statement -> return_statement
Rule 9     statement -> move_statement
Rule 10    statement -> function_decl
Rule 11    statement -> array_decl
Rule 12    statement -> pointer_decl
Rule 13    statement -> address_of
Rule 14    statement -> function_call_stmt
Rule 15    assignment -> IDENTIFIER ASSIGN expr SEMI
Rule 16    assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
Rule 17    assignment -> IDENTIFIER ASSIGN function_call SEMI
Rule 18    print_statement -> PRINT LPAREN expr RPAREN SEMI
Rule 19    if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 20    if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE
Rule 21    while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
Rule 22    while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
Rule 23    return_statement -> RETURN expr SEMI
Rule 24    move_statement -> direction SEMI
Rule 25    direction -> TOP
Rule 26    direction -> BOTTOM
Rule 27    direction -> LEFT
Rule 28    direction -> RIGHT
Rule 29    direction -> TIMESHIFT
Rule 30    function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
Rule 31    function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
Rule 32    function_args -> expr
Rule 33    function_args -> function_call
Rule 34    function_args_list -> function_args
Rule 35    function_args_list -> function_args COMMA function_args_list
Rule 36    function_call -> IDENTIFIER LPAREN function_args_list RPAREN
Rule 37    function_call -> IDENTIFIER LPAREN RPAREN
Rule 38    function_call_stmt -> function_call SEMI
Rule 39    params -> IDENTIFIER
Rule 40    params -> IDENTIFIER COMMA params
Rule 41    array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
Rule 42    array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
Rule 43    pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
Rule 44    pointer_decl -> POINTER_TYPE IDENTIFIER SEMI
Rule 45    expr -> expr PLUS expr
Rule 46    expr -> expr MINUS expr
Rule 47    expr -> expr MUL expr
Rule 48    expr -> expr DIV expr
Rule 49    expr -> expr EQ expr
Rule 50    expr -> expr NE expr
Rule 51    expr -> expr LT expr
Rule 52    expr -> expr GT expr
Rule 53    expr -> expr LE expr
Rule 54    expr -> expr GE expr
Rule 55    expr -> LPAREN expr RPAREN
Rule 56    expr -> NUMBER
Rule 57    expr -> MINUS expr
Rule 58    expr -> MUL expr
Rule 59    expr -> QUESTION_MARK IDENTIFIER
Rule 60    address_of -> AMPERSAND IDENTIFIER
Rule 61    expr -> STRING
Rule 62    expr -> IDENTIFIER
Rule 63    expr -> function_call
Rule 64    expr -> address_of

Terminals, with rules where they appear

AMPERSAND            : 60
ARRAY_TYPE           : 41 42
ASSIGN               : 15 16 17 43
BOTTOM               : 26
COMMA                : 35 40
DIV                  : 48
ELSE                 : 19
EMPTY_ARRAY          : 
EQ                   : 49
FUNCTION             : 30 31
GE                   : 54
GT                   : 52
IDENTIFIER           : 15 16 17 30 31 36 37 39 40 41 42 43 44 59 60 62
IF                   : 19 20
INSTEAD              : 22
INTEGER_TYPE         : 41 42 43
LBRACE               : 19 19 20 21 22 22 30 31
LE                   : 53
LEFT                 : 27
LPAREN               : 18 19 20 21 22 30 31 36 37 55
LSQUARE              : 16
LT                   : 51
MINUS                : 46 57
MUL                  : 47 58
MUTABLE              : 
NE                   : 50
NUMBER               : 56
OF                   : 41 42
PLUS                 : 45
POINTER_TYPE         : 43 44
PRINT                : 18
QUESTION_MARK        : 59
RBRACE               : 19 19 20 21 22 22 30 31
RETURN               : 23
RIGHT                : 28
RPAREN               : 18 19 20 21 22 30 31 36 37 55
RSQUARE              : 16
SEMI                 : 15 16 17 18 23 24 38 41 42 43 44
STRING               : 61
STRING_TYPE          : 
TIMESHIFT            : 29
TOP                  : 25
WHILE                : 21 22
error                : 

Nonterminals, with rules where they appear

address_of           : 13 64
array_decl           : 11
assignment           : 4
direction            : 24
expr                 : 15 16 16 18 19 20 21 22 23 32 41 43 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 57 58
function_args        : 34 35
function_args_list   : 35 36
function_call        : 17 33 38 63
function_call_stmt   : 14
function_decl        : 10
if_statement         : 6
move_statement       : 9
params               : 30 40
pointer_decl         : 12
print_statement      : 5
program              : 0
return_statement     : 8
statement            : 2 3
statement_list       : 1 3 19 19 20 21 22 22 30 31
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 3

    (2) statement_list -> statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    FUNCTION        reduce using rule 2 (statement_list -> statement .)
    ARRAY_TYPE      reduce using rule 2 (statement_list -> statement .)
    POINTER_TYPE    reduce using rule 2 (statement_list -> statement .)
    AMPERSAND       reduce using rule 2 (statement_list -> statement .)
    TOP             reduce using rule 2 (statement_list -> statement .)
    BOTTOM          reduce using rule 2 (statement_list -> statement .)
    LEFT            reduce using rule 2 (statement_list -> statement .)
    RIGHT           reduce using rule 2 (statement_list -> statement .)
    TIMESHIFT       reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> assignment .

    IDENTIFIER      reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    FUNCTION        reduce using rule 4 (statement -> assignment .)
    ARRAY_TYPE      reduce using rule 4 (statement -> assignment .)
    POINTER_TYPE    reduce using rule 4 (statement -> assignment .)
    AMPERSAND       reduce using rule 4 (statement -> assignment .)
    TOP             reduce using rule 4 (statement -> assignment .)
    BOTTOM          reduce using rule 4 (statement -> assignment .)
    LEFT            reduce using rule 4 (statement -> assignment .)
    RIGHT           reduce using rule 4 (statement -> assignment .)
    TIMESHIFT       reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> print_statement .

    IDENTIFIER      reduce using rule 5 (statement -> print_statement .)
    PRINT           reduce using rule 5 (statement -> print_statement .)
    IF              reduce using rule 5 (statement -> print_statement .)
    WHILE           reduce using rule 5 (statement -> print_statement .)
    RETURN          reduce using rule 5 (statement -> print_statement .)
    FUNCTION        reduce using rule 5 (statement -> print_statement .)
    ARRAY_TYPE      reduce using rule 5 (statement -> print_statement .)
    POINTER_TYPE    reduce using rule 5 (statement -> print_statement .)
    AMPERSAND       reduce using rule 5 (statement -> print_statement .)
    TOP             reduce using rule 5 (statement -> print_statement .)
    BOTTOM          reduce using rule 5 (statement -> print_statement .)
    LEFT            reduce using rule 5 (statement -> print_statement .)
    RIGHT           reduce using rule 5 (statement -> print_statement .)
    TIMESHIFT       reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)
    RBRACE          reduce using rule 5 (statement -> print_statement .)


state 6

    (6) statement -> if_statement .

    IDENTIFIER      reduce using rule 6 (statement -> if_statement .)
    PRINT           reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    RETURN          reduce using rule 6 (statement -> if_statement .)
    FUNCTION        reduce using rule 6 (statement -> if_statement .)
    ARRAY_TYPE      reduce using rule 6 (statement -> if_statement .)
    POINTER_TYPE    reduce using rule 6 (statement -> if_statement .)
    AMPERSAND       reduce using rule 6 (statement -> if_statement .)
    TOP             reduce using rule 6 (statement -> if_statement .)
    BOTTOM          reduce using rule 6 (statement -> if_statement .)
    LEFT            reduce using rule 6 (statement -> if_statement .)
    RIGHT           reduce using rule 6 (statement -> if_statement .)
    TIMESHIFT       reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> while_statement .

    IDENTIFIER      reduce using rule 7 (statement -> while_statement .)
    PRINT           reduce using rule 7 (statement -> while_statement .)
    IF              reduce using rule 7 (statement -> while_statement .)
    WHILE           reduce using rule 7 (statement -> while_statement .)
    RETURN          reduce using rule 7 (statement -> while_statement .)
    FUNCTION        reduce using rule 7 (statement -> while_statement .)
    ARRAY_TYPE      reduce using rule 7 (statement -> while_statement .)
    POINTER_TYPE    reduce using rule 7 (statement -> while_statement .)
    AMPERSAND       reduce using rule 7 (statement -> while_statement .)
    TOP             reduce using rule 7 (statement -> while_statement .)
    BOTTOM          reduce using rule 7 (statement -> while_statement .)
    LEFT            reduce using rule 7 (statement -> while_statement .)
    RIGHT           reduce using rule 7 (statement -> while_statement .)
    TIMESHIFT       reduce using rule 7 (statement -> while_statement .)
    $end            reduce using rule 7 (statement -> while_statement .)
    RBRACE          reduce using rule 7 (statement -> while_statement .)


state 8

    (8) statement -> return_statement .

    IDENTIFIER      reduce using rule 8 (statement -> return_statement .)
    PRINT           reduce using rule 8 (statement -> return_statement .)
    IF              reduce using rule 8 (statement -> return_statement .)
    WHILE           reduce using rule 8 (statement -> return_statement .)
    RETURN          reduce using rule 8 (statement -> return_statement .)
    FUNCTION        reduce using rule 8 (statement -> return_statement .)
    ARRAY_TYPE      reduce using rule 8 (statement -> return_statement .)
    POINTER_TYPE    reduce using rule 8 (statement -> return_statement .)
    AMPERSAND       reduce using rule 8 (statement -> return_statement .)
    TOP             reduce using rule 8 (statement -> return_statement .)
    BOTTOM          reduce using rule 8 (statement -> return_statement .)
    LEFT            reduce using rule 8 (statement -> return_statement .)
    RIGHT           reduce using rule 8 (statement -> return_statement .)
    TIMESHIFT       reduce using rule 8 (statement -> return_statement .)
    $end            reduce using rule 8 (statement -> return_statement .)
    RBRACE          reduce using rule 8 (statement -> return_statement .)


state 9

    (9) statement -> move_statement .

    IDENTIFIER      reduce using rule 9 (statement -> move_statement .)
    PRINT           reduce using rule 9 (statement -> move_statement .)
    IF              reduce using rule 9 (statement -> move_statement .)
    WHILE           reduce using rule 9 (statement -> move_statement .)
    RETURN          reduce using rule 9 (statement -> move_statement .)
    FUNCTION        reduce using rule 9 (statement -> move_statement .)
    ARRAY_TYPE      reduce using rule 9 (statement -> move_statement .)
    POINTER_TYPE    reduce using rule 9 (statement -> move_statement .)
    AMPERSAND       reduce using rule 9 (statement -> move_statement .)
    TOP             reduce using rule 9 (statement -> move_statement .)
    BOTTOM          reduce using rule 9 (statement -> move_statement .)
    LEFT            reduce using rule 9 (statement -> move_statement .)
    RIGHT           reduce using rule 9 (statement -> move_statement .)
    TIMESHIFT       reduce using rule 9 (statement -> move_statement .)
    $end            reduce using rule 9 (statement -> move_statement .)
    RBRACE          reduce using rule 9 (statement -> move_statement .)


state 10

    (10) statement -> function_decl .

    IDENTIFIER      reduce using rule 10 (statement -> function_decl .)
    PRINT           reduce using rule 10 (statement -> function_decl .)
    IF              reduce using rule 10 (statement -> function_decl .)
    WHILE           reduce using rule 10 (statement -> function_decl .)
    RETURN          reduce using rule 10 (statement -> function_decl .)
    FUNCTION        reduce using rule 10 (statement -> function_decl .)
    ARRAY_TYPE      reduce using rule 10 (statement -> function_decl .)
    POINTER_TYPE    reduce using rule 10 (statement -> function_decl .)
    AMPERSAND       reduce using rule 10 (statement -> function_decl .)
    TOP             reduce using rule 10 (statement -> function_decl .)
    BOTTOM          reduce using rule 10 (statement -> function_decl .)
    LEFT            reduce using rule 10 (statement -> function_decl .)
    RIGHT           reduce using rule 10 (statement -> function_decl .)
    TIMESHIFT       reduce using rule 10 (statement -> function_decl .)
    $end            reduce using rule 10 (statement -> function_decl .)
    RBRACE          reduce using rule 10 (statement -> function_decl .)


state 11

    (11) statement -> array_decl .

    IDENTIFIER      reduce using rule 11 (statement -> array_decl .)
    PRINT           reduce using rule 11 (statement -> array_decl .)
    IF              reduce using rule 11 (statement -> array_decl .)
    WHILE           reduce using rule 11 (statement -> array_decl .)
    RETURN          reduce using rule 11 (statement -> array_decl .)
    FUNCTION        reduce using rule 11 (statement -> array_decl .)
    ARRAY_TYPE      reduce using rule 11 (statement -> array_decl .)
    POINTER_TYPE    reduce using rule 11 (statement -> array_decl .)
    AMPERSAND       reduce using rule 11 (statement -> array_decl .)
    TOP             reduce using rule 11 (statement -> array_decl .)
    BOTTOM          reduce using rule 11 (statement -> array_decl .)
    LEFT            reduce using rule 11 (statement -> array_decl .)
    RIGHT           reduce using rule 11 (statement -> array_decl .)
    TIMESHIFT       reduce using rule 11 (statement -> array_decl .)
    $end            reduce using rule 11 (statement -> array_decl .)
    RBRACE          reduce using rule 11 (statement -> array_decl .)


state 12

    (12) statement -> pointer_decl .

    IDENTIFIER      reduce using rule 12 (statement -> pointer_decl .)
    PRINT           reduce using rule 12 (statement -> pointer_decl .)
    IF              reduce using rule 12 (statement -> pointer_decl .)
    WHILE           reduce using rule 12 (statement -> pointer_decl .)
    RETURN          reduce using rule 12 (statement -> pointer_decl .)
    FUNCTION        reduce using rule 12 (statement -> pointer_decl .)
    ARRAY_TYPE      reduce using rule 12 (statement -> pointer_decl .)
    POINTER_TYPE    reduce using rule 12 (statement -> pointer_decl .)
    AMPERSAND       reduce using rule 12 (statement -> pointer_decl .)
    TOP             reduce using rule 12 (statement -> pointer_decl .)
    BOTTOM          reduce using rule 12 (statement -> pointer_decl .)
    LEFT            reduce using rule 12 (statement -> pointer_decl .)
    RIGHT           reduce using rule 12 (statement -> pointer_decl .)
    TIMESHIFT       reduce using rule 12 (statement -> pointer_decl .)
    $end            reduce using rule 12 (statement -> pointer_decl .)
    RBRACE          reduce using rule 12 (statement -> pointer_decl .)


state 13

    (13) statement -> address_of .

    IDENTIFIER      reduce using rule 13 (statement -> address_of .)
    PRINT           reduce using rule 13 (statement -> address_of .)
    IF              reduce using rule 13 (statement -> address_of .)
    WHILE           reduce using rule 13 (statement -> address_of .)
    RETURN          reduce using rule 13 (statement -> address_of .)
    FUNCTION        reduce using rule 13 (statement -> address_of .)
    ARRAY_TYPE      reduce using rule 13 (statement -> address_of .)
    POINTER_TYPE    reduce using rule 13 (statement -> address_of .)
    AMPERSAND       reduce using rule 13 (statement -> address_of .)
    TOP             reduce using rule 13 (statement -> address_of .)
    BOTTOM          reduce using rule 13 (statement -> address_of .)
    LEFT            reduce using rule 13 (statement -> address_of .)
    RIGHT           reduce using rule 13 (statement -> address_of .)
    TIMESHIFT       reduce using rule 13 (statement -> address_of .)
    $end            reduce using rule 13 (statement -> address_of .)
    RBRACE          reduce using rule 13 (statement -> address_of .)


state 14

    (14) statement -> function_call_stmt .

    IDENTIFIER      reduce using rule 14 (statement -> function_call_stmt .)
    PRINT           reduce using rule 14 (statement -> function_call_stmt .)
    IF              reduce using rule 14 (statement -> function_call_stmt .)
    WHILE           reduce using rule 14 (statement -> function_call_stmt .)
    RETURN          reduce using rule 14 (statement -> function_call_stmt .)
    FUNCTION        reduce using rule 14 (statement -> function_call_stmt .)
    ARRAY_TYPE      reduce using rule 14 (statement -> function_call_stmt .)
    POINTER_TYPE    reduce using rule 14 (statement -> function_call_stmt .)
    AMPERSAND       reduce using rule 14 (statement -> function_call_stmt .)
    TOP             reduce using rule 14 (statement -> function_call_stmt .)
    BOTTOM          reduce using rule 14 (statement -> function_call_stmt .)
    LEFT            reduce using rule 14 (statement -> function_call_stmt .)
    RIGHT           reduce using rule 14 (statement -> function_call_stmt .)
    TIMESHIFT       reduce using rule 14 (statement -> function_call_stmt .)
    $end            reduce using rule 14 (statement -> function_call_stmt .)
    RBRACE          reduce using rule 14 (statement -> function_call_stmt .)


state 15

    (15) assignment -> IDENTIFIER . ASSIGN expr SEMI
    (16) assignment -> IDENTIFIER . LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> IDENTIFIER . ASSIGN function_call SEMI
    (36) function_call -> IDENTIFIER . LPAREN function_args_list RPAREN
    (37) function_call -> IDENTIFIER . LPAREN RPAREN

    ASSIGN          shift and go to state 32
    LSQUARE         shift and go to state 33
    LPAREN          shift and go to state 34


state 16

    (38) function_call_stmt -> function_call . SEMI

    SEMI            shift and go to state 35


state 17

    (18) print_statement -> PRINT . LPAREN expr RPAREN SEMI

    LPAREN          shift and go to state 36


state 18

    (19) if_statement -> IF . LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> IF . LPAREN expr RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 37


state 19

    (21) while_statement -> WHILE . LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> WHILE . LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE

    LPAREN          shift and go to state 38


state 20

    (23) return_statement -> RETURN . expr SEMI
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 39
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 21

    (24) move_statement -> direction . SEMI

    SEMI            shift and go to state 49


state 22

    (30) function_decl -> FUNCTION . IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> FUNCTION . IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE

    IDENTIFIER      shift and go to state 50


state 23

    (41) array_decl -> ARRAY_TYPE . INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> ARRAY_TYPE . INTEGER_TYPE OF IDENTIFIER SEMI

    INTEGER_TYPE    shift and go to state 51


state 24

    (43) pointer_decl -> POINTER_TYPE . INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> POINTER_TYPE . IDENTIFIER SEMI

    INTEGER_TYPE    shift and go to state 52
    IDENTIFIER      shift and go to state 53


state 25

    (60) address_of -> AMPERSAND . IDENTIFIER

    IDENTIFIER      shift and go to state 54


state 26

    (25) direction -> TOP .

    SEMI            reduce using rule 25 (direction -> TOP .)


state 27

    (26) direction -> BOTTOM .

    SEMI            reduce using rule 26 (direction -> BOTTOM .)


state 28

    (27) direction -> LEFT .

    SEMI            reduce using rule 27 (direction -> LEFT .)


state 29

    (28) direction -> RIGHT .

    SEMI            reduce using rule 28 (direction -> RIGHT .)


state 30

    (29) direction -> TIMESHIFT .

    SEMI            reduce using rule 29 (direction -> TIMESHIFT .)


state 31

    (3) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 3 (statement_list -> statement_list statement .)
    ARRAY_TYPE      reduce using rule 3 (statement_list -> statement_list statement .)
    POINTER_TYPE    reduce using rule 3 (statement_list -> statement_list statement .)
    AMPERSAND       reduce using rule 3 (statement_list -> statement_list statement .)
    TOP             reduce using rule 3 (statement_list -> statement_list statement .)
    BOTTOM          reduce using rule 3 (statement_list -> statement_list statement .)
    LEFT            reduce using rule 3 (statement_list -> statement_list statement .)
    RIGHT           reduce using rule 3 (statement_list -> statement_list statement .)
    TIMESHIFT       reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)


state 32

    (15) assignment -> IDENTIFIER ASSIGN . expr SEMI
    (17) assignment -> IDENTIFIER ASSIGN . function_call SEMI
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 55
    function_call                  shift and go to state 56
    address_of                     shift and go to state 48

state 33

    (16) assignment -> IDENTIFIER LSQUARE . expr RSQUARE ASSIGN expr SEMI
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 57
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 34

    (36) function_call -> IDENTIFIER LPAREN . function_args_list RPAREN
    (37) function_call -> IDENTIFIER LPAREN . RPAREN
    (34) function_args_list -> . function_args
    (35) function_args_list -> . function_args COMMA function_args_list
    (32) function_args -> . expr
    (33) function_args -> . function_call
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    RPAREN          shift and go to state 59
    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    function_args_list             shift and go to state 58
    function_args                  shift and go to state 60
    expr                           shift and go to state 61
    function_call                  shift and go to state 62
    address_of                     shift and go to state 48

state 35

    (38) function_call_stmt -> function_call SEMI .

    IDENTIFIER      reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    PRINT           reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    IF              reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    WHILE           reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    RETURN          reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    FUNCTION        reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    ARRAY_TYPE      reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    POINTER_TYPE    reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    AMPERSAND       reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    TOP             reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    BOTTOM          reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    LEFT            reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    RIGHT           reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    TIMESHIFT       reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    $end            reduce using rule 38 (function_call_stmt -> function_call SEMI .)
    RBRACE          reduce using rule 38 (function_call_stmt -> function_call SEMI .)


state 36

    (18) print_statement -> PRINT LPAREN . expr RPAREN SEMI
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 63
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 37

    (19) if_statement -> IF LPAREN . expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> IF LPAREN . expr RPAREN LBRACE statement_list RBRACE
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 64
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 38

    (21) while_statement -> WHILE LPAREN . expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> WHILE LPAREN . expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 65
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 39

    (23) return_statement -> RETURN expr . SEMI
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 40

    (57) expr -> MINUS . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 77
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 41

    (58) expr -> MUL . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 78
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 42

    (55) expr -> LPAREN . expr RPAREN
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 79
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 43

    (56) expr -> NUMBER .

    SEMI            reduce using rule 56 (expr -> NUMBER .)
    PLUS            reduce using rule 56 (expr -> NUMBER .)
    MINUS           reduce using rule 56 (expr -> NUMBER .)
    MUL             reduce using rule 56 (expr -> NUMBER .)
    DIV             reduce using rule 56 (expr -> NUMBER .)
    EQ              reduce using rule 56 (expr -> NUMBER .)
    NE              reduce using rule 56 (expr -> NUMBER .)
    LT              reduce using rule 56 (expr -> NUMBER .)
    GT              reduce using rule 56 (expr -> NUMBER .)
    LE              reduce using rule 56 (expr -> NUMBER .)
    GE              reduce using rule 56 (expr -> NUMBER .)
    RSQUARE         reduce using rule 56 (expr -> NUMBER .)
    COMMA           reduce using rule 56 (expr -> NUMBER .)
    RPAREN          reduce using rule 56 (expr -> NUMBER .)


state 44

    (59) expr -> QUESTION_MARK . IDENTIFIER

    IDENTIFIER      shift and go to state 80


state 45

    (62) expr -> IDENTIFIER .
    (36) function_call -> IDENTIFIER . LPAREN function_args_list RPAREN
    (37) function_call -> IDENTIFIER . LPAREN RPAREN

    SEMI            reduce using rule 62 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 62 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 62 (expr -> IDENTIFIER .)
    MUL             reduce using rule 62 (expr -> IDENTIFIER .)
    DIV             reduce using rule 62 (expr -> IDENTIFIER .)
    EQ              reduce using rule 62 (expr -> IDENTIFIER .)
    NE              reduce using rule 62 (expr -> IDENTIFIER .)
    LT              reduce using rule 62 (expr -> IDENTIFIER .)
    GT              reduce using rule 62 (expr -> IDENTIFIER .)
    LE              reduce using rule 62 (expr -> IDENTIFIER .)
    GE              reduce using rule 62 (expr -> IDENTIFIER .)
    RSQUARE         reduce using rule 62 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 62 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 62 (expr -> IDENTIFIER .)
    LPAREN          shift and go to state 34


state 46

    (61) expr -> STRING .

    SEMI            reduce using rule 61 (expr -> STRING .)
    PLUS            reduce using rule 61 (expr -> STRING .)
    MINUS           reduce using rule 61 (expr -> STRING .)
    MUL             reduce using rule 61 (expr -> STRING .)
    DIV             reduce using rule 61 (expr -> STRING .)
    EQ              reduce using rule 61 (expr -> STRING .)
    NE              reduce using rule 61 (expr -> STRING .)
    LT              reduce using rule 61 (expr -> STRING .)
    GT              reduce using rule 61 (expr -> STRING .)
    LE              reduce using rule 61 (expr -> STRING .)
    GE              reduce using rule 61 (expr -> STRING .)
    RSQUARE         reduce using rule 61 (expr -> STRING .)
    COMMA           reduce using rule 61 (expr -> STRING .)
    RPAREN          reduce using rule 61 (expr -> STRING .)


state 47

    (63) expr -> function_call .

    SEMI            reduce using rule 63 (expr -> function_call .)
    PLUS            reduce using rule 63 (expr -> function_call .)
    MINUS           reduce using rule 63 (expr -> function_call .)
    MUL             reduce using rule 63 (expr -> function_call .)
    DIV             reduce using rule 63 (expr -> function_call .)
    EQ              reduce using rule 63 (expr -> function_call .)
    NE              reduce using rule 63 (expr -> function_call .)
    LT              reduce using rule 63 (expr -> function_call .)
    GT              reduce using rule 63 (expr -> function_call .)
    LE              reduce using rule 63 (expr -> function_call .)
    GE              reduce using rule 63 (expr -> function_call .)
    RSQUARE         reduce using rule 63 (expr -> function_call .)
    RPAREN          reduce using rule 63 (expr -> function_call .)
    COMMA           reduce using rule 63 (expr -> function_call .)


state 48

    (64) expr -> address_of .

    SEMI            reduce using rule 64 (expr -> address_of .)
    PLUS            reduce using rule 64 (expr -> address_of .)
    MINUS           reduce using rule 64 (expr -> address_of .)
    MUL             reduce using rule 64 (expr -> address_of .)
    DIV             reduce using rule 64 (expr -> address_of .)
    EQ              reduce using rule 64 (expr -> address_of .)
    NE              reduce using rule 64 (expr -> address_of .)
    LT              reduce using rule 64 (expr -> address_of .)
    GT              reduce using rule 64 (expr -> address_of .)
    LE              reduce using rule 64 (expr -> address_of .)
    GE              reduce using rule 64 (expr -> address_of .)
    RSQUARE         reduce using rule 64 (expr -> address_of .)
    COMMA           reduce using rule 64 (expr -> address_of .)
    RPAREN          reduce using rule 64 (expr -> address_of .)


state 49

    (24) move_statement -> direction SEMI .

    IDENTIFIER      reduce using rule 24 (move_statement -> direction SEMI .)
    PRINT           reduce using rule 24 (move_statement -> direction SEMI .)
    IF              reduce using rule 24 (move_statement -> direction SEMI .)
    WHILE           reduce using rule 24 (move_statement -> direction SEMI .)
    RETURN          reduce using rule 24 (move_statement -> direction SEMI .)
    FUNCTION        reduce using rule 24 (move_statement -> direction SEMI .)
    ARRAY_TYPE      reduce using rule 24 (move_statement -> direction SEMI .)
    POINTER_TYPE    reduce using rule 24 (move_statement -> direction SEMI .)
    AMPERSAND       reduce using rule 24 (move_statement -> direction SEMI .)
    TOP             reduce using rule 24 (move_statement -> direction SEMI .)
    BOTTOM          reduce using rule 24 (move_statement -> direction SEMI .)
    LEFT            reduce using rule 24 (move_statement -> direction SEMI .)
    RIGHT           reduce using rule 24 (move_statement -> direction SEMI .)
    TIMESHIFT       reduce using rule 24 (move_statement -> direction SEMI .)
    $end            reduce using rule 24 (move_statement -> direction SEMI .)
    RBRACE          reduce using rule 24 (move_statement -> direction SEMI .)


state 50

    (30) function_decl -> FUNCTION IDENTIFIER . LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> FUNCTION IDENTIFIER . LPAREN RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 81


state 51

    (41) array_decl -> ARRAY_TYPE INTEGER_TYPE . OF IDENTIFIER expr SEMI
    (42) array_decl -> ARRAY_TYPE INTEGER_TYPE . OF IDENTIFIER SEMI

    OF              shift and go to state 82


state 52

    (43) pointer_decl -> POINTER_TYPE INTEGER_TYPE . IDENTIFIER ASSIGN expr SEMI

    IDENTIFIER      shift and go to state 83


state 53

    (44) pointer_decl -> POINTER_TYPE IDENTIFIER . SEMI

    SEMI            shift and go to state 84


state 54

    (60) address_of -> AMPERSAND IDENTIFIER .

    IDENTIFIER      reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    PRINT           reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    IF              reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    WHILE           reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    RETURN          reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    FUNCTION        reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    ARRAY_TYPE      reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    POINTER_TYPE    reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    AMPERSAND       reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    TOP             reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    BOTTOM          reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    LEFT            reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    RIGHT           reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    TIMESHIFT       reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    $end            reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    SEMI            reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    PLUS            reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    MINUS           reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    MUL             reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    DIV             reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    EQ              reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    NE              reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    LT              reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    GT              reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    LE              reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    GE              reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    RSQUARE         reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    COMMA           reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    RPAREN          reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)
    RBRACE          reduce using rule 60 (address_of -> AMPERSAND IDENTIFIER .)


state 55

    (15) assignment -> IDENTIFIER ASSIGN expr . SEMI
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            shift and go to state 85
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 56

    (17) assignment -> IDENTIFIER ASSIGN function_call . SEMI
    (63) expr -> function_call .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 86
    PLUS            reduce using rule 63 (expr -> function_call .)
    MINUS           reduce using rule 63 (expr -> function_call .)
    MUL             reduce using rule 63 (expr -> function_call .)
    DIV             reduce using rule 63 (expr -> function_call .)
    EQ              reduce using rule 63 (expr -> function_call .)
    NE              reduce using rule 63 (expr -> function_call .)
    LT              reduce using rule 63 (expr -> function_call .)
    GT              reduce using rule 63 (expr -> function_call .)
    LE              reduce using rule 63 (expr -> function_call .)
    GE              reduce using rule 63 (expr -> function_call .)

  ! SEMI            [ reduce using rule 63 (expr -> function_call .) ]


state 57

    (16) assignment -> IDENTIFIER LSQUARE expr . RSQUARE ASSIGN expr SEMI
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    RSQUARE         shift and go to state 87
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 58

    (36) function_call -> IDENTIFIER LPAREN function_args_list . RPAREN

    RPAREN          shift and go to state 88


state 59

    (37) function_call -> IDENTIFIER LPAREN RPAREN .

    SEMI            reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    PLUS            reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    MINUS           reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    MUL             reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    DIV             reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    EQ              reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    NE              reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    LT              reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    GT              reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    LE              reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    GE              reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    RSQUARE         reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 37 (function_call -> IDENTIFIER LPAREN RPAREN .)


state 60

    (34) function_args_list -> function_args .
    (35) function_args_list -> function_args . COMMA function_args_list

    RPAREN          reduce using rule 34 (function_args_list -> function_args .)
    COMMA           shift and go to state 89


state 61

    (32) function_args -> expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    COMMA           reduce using rule 32 (function_args -> expr .)
    RPAREN          reduce using rule 32 (function_args -> expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 62

    (33) function_args -> function_call .
    (63) expr -> function_call .

  ! reduce/reduce conflict for COMMA resolved using rule 33 (function_args -> function_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 33 (function_args -> function_call .)
    COMMA           reduce using rule 33 (function_args -> function_call .)
    RPAREN          reduce using rule 33 (function_args -> function_call .)
    PLUS            reduce using rule 63 (expr -> function_call .)
    MINUS           reduce using rule 63 (expr -> function_call .)
    MUL             reduce using rule 63 (expr -> function_call .)
    DIV             reduce using rule 63 (expr -> function_call .)
    EQ              reduce using rule 63 (expr -> function_call .)
    NE              reduce using rule 63 (expr -> function_call .)
    LT              reduce using rule 63 (expr -> function_call .)
    GT              reduce using rule 63 (expr -> function_call .)
    LE              reduce using rule 63 (expr -> function_call .)
    GE              reduce using rule 63 (expr -> function_call .)

  ! COMMA           [ reduce using rule 63 (expr -> function_call .) ]
  ! RPAREN          [ reduce using rule 63 (expr -> function_call .) ]


state 63

    (18) print_statement -> PRINT LPAREN expr . RPAREN SEMI
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    RPAREN          shift and go to state 90
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 64

    (19) if_statement -> IF LPAREN expr . RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> IF LPAREN expr . RPAREN LBRACE statement_list RBRACE
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    RPAREN          shift and go to state 91
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 65

    (21) while_statement -> WHILE LPAREN expr . RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> WHILE LPAREN expr . RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    RPAREN          shift and go to state 92
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 66

    (23) return_statement -> RETURN expr SEMI .

    IDENTIFIER      reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    PRINT           reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    IF              reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    WHILE           reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    RETURN          reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    FUNCTION        reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    ARRAY_TYPE      reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    POINTER_TYPE    reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    AMPERSAND       reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    TOP             reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    BOTTOM          reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    LEFT            reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    RIGHT           reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    TIMESHIFT       reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    $end            reduce using rule 23 (return_statement -> RETURN expr SEMI .)
    RBRACE          reduce using rule 23 (return_statement -> RETURN expr SEMI .)


state 67

    (45) expr -> expr PLUS . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 93
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 68

    (46) expr -> expr MINUS . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 94
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 69

    (47) expr -> expr MUL . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 95
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 70

    (48) expr -> expr DIV . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 96
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 71

    (49) expr -> expr EQ . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 97
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 72

    (50) expr -> expr NE . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 98
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 73

    (51) expr -> expr LT . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 99
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 74

    (52) expr -> expr GT . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 100
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 75

    (53) expr -> expr LE . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 101
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 76

    (54) expr -> expr GE . expr
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 102
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 77

    (57) expr -> MINUS expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            reduce using rule 57 (expr -> MINUS expr .)
    PLUS            reduce using rule 57 (expr -> MINUS expr .)
    MINUS           reduce using rule 57 (expr -> MINUS expr .)
    MUL             reduce using rule 57 (expr -> MINUS expr .)
    DIV             reduce using rule 57 (expr -> MINUS expr .)
    EQ              reduce using rule 57 (expr -> MINUS expr .)
    NE              reduce using rule 57 (expr -> MINUS expr .)
    LT              reduce using rule 57 (expr -> MINUS expr .)
    GT              reduce using rule 57 (expr -> MINUS expr .)
    LE              reduce using rule 57 (expr -> MINUS expr .)
    GE              reduce using rule 57 (expr -> MINUS expr .)
    RSQUARE         reduce using rule 57 (expr -> MINUS expr .)
    COMMA           reduce using rule 57 (expr -> MINUS expr .)
    RPAREN          reduce using rule 57 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! EQ              [ shift and go to state 71 ]
  ! NE              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 75 ]
  ! GE              [ shift and go to state 76 ]


state 78

    (58) expr -> MUL expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            reduce using rule 58 (expr -> MUL expr .)
    PLUS            reduce using rule 58 (expr -> MUL expr .)
    MINUS           reduce using rule 58 (expr -> MUL expr .)
    MUL             reduce using rule 58 (expr -> MUL expr .)
    DIV             reduce using rule 58 (expr -> MUL expr .)
    EQ              reduce using rule 58 (expr -> MUL expr .)
    NE              reduce using rule 58 (expr -> MUL expr .)
    LT              reduce using rule 58 (expr -> MUL expr .)
    GT              reduce using rule 58 (expr -> MUL expr .)
    LE              reduce using rule 58 (expr -> MUL expr .)
    GE              reduce using rule 58 (expr -> MUL expr .)
    RSQUARE         reduce using rule 58 (expr -> MUL expr .)
    COMMA           reduce using rule 58 (expr -> MUL expr .)
    RPAREN          reduce using rule 58 (expr -> MUL expr .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! EQ              [ shift and go to state 71 ]
  ! NE              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 75 ]
  ! GE              [ shift and go to state 76 ]


state 79

    (55) expr -> LPAREN expr . RPAREN
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    RPAREN          shift and go to state 103
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 80

    (59) expr -> QUESTION_MARK IDENTIFIER .

    SEMI            reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    PLUS            reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    MINUS           reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    MUL             reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    DIV             reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    EQ              reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    NE              reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    LT              reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    GT              reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    LE              reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    GE              reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    RSQUARE         reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    COMMA           reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)
    RPAREN          reduce using rule 59 (expr -> QUESTION_MARK IDENTIFIER .)


state 81

    (30) function_decl -> FUNCTION IDENTIFIER LPAREN . params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> FUNCTION IDENTIFIER LPAREN . RPAREN LBRACE statement_list RBRACE
    (39) params -> . IDENTIFIER
    (40) params -> . IDENTIFIER COMMA params

    RPAREN          shift and go to state 106
    IDENTIFIER      shift and go to state 104

    params                         shift and go to state 105

state 82

    (41) array_decl -> ARRAY_TYPE INTEGER_TYPE OF . IDENTIFIER expr SEMI
    (42) array_decl -> ARRAY_TYPE INTEGER_TYPE OF . IDENTIFIER SEMI

    IDENTIFIER      shift and go to state 107


state 83

    (43) pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER . ASSIGN expr SEMI

    ASSIGN          shift and go to state 108


state 84

    (44) pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .

    IDENTIFIER      reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    PRINT           reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    IF              reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    WHILE           reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    RETURN          reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    FUNCTION        reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    ARRAY_TYPE      reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    POINTER_TYPE    reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    AMPERSAND       reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    TOP             reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    BOTTOM          reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    LEFT            reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    RIGHT           reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    TIMESHIFT       reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    $end            reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)
    RBRACE          reduce using rule 44 (pointer_decl -> POINTER_TYPE IDENTIFIER SEMI .)


state 85

    (15) assignment -> IDENTIFIER ASSIGN expr SEMI .

    IDENTIFIER      reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    PRINT           reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    IF              reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    WHILE           reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    RETURN          reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    FUNCTION        reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    ARRAY_TYPE      reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    POINTER_TYPE    reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    AMPERSAND       reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    TOP             reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    BOTTOM          reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    LEFT            reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    RIGHT           reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    TIMESHIFT       reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    $end            reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)
    RBRACE          reduce using rule 15 (assignment -> IDENTIFIER ASSIGN expr SEMI .)


state 86

    (17) assignment -> IDENTIFIER ASSIGN function_call SEMI .

    IDENTIFIER      reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    PRINT           reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    IF              reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    WHILE           reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    RETURN          reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    FUNCTION        reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    ARRAY_TYPE      reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    POINTER_TYPE    reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    AMPERSAND       reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    TOP             reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    BOTTOM          reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    LEFT            reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    RIGHT           reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    TIMESHIFT       reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    $end            reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)
    RBRACE          reduce using rule 17 (assignment -> IDENTIFIER ASSIGN function_call SEMI .)


state 87

    (16) assignment -> IDENTIFIER LSQUARE expr RSQUARE . ASSIGN expr SEMI

    ASSIGN          shift and go to state 109


state 88

    (36) function_call -> IDENTIFIER LPAREN function_args_list RPAREN .

    SEMI            reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    PLUS            reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    MINUS           reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    MUL             reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    DIV             reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    EQ              reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    NE              reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    LT              reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    GT              reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    LE              reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    GE              reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    RSQUARE         reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    COMMA           reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)
    RPAREN          reduce using rule 36 (function_call -> IDENTIFIER LPAREN function_args_list RPAREN .)


state 89

    (35) function_args_list -> function_args COMMA . function_args_list
    (34) function_args_list -> . function_args
    (35) function_args_list -> . function_args COMMA function_args_list
    (32) function_args -> . expr
    (33) function_args -> . function_call
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    function_args                  shift and go to state 60
    function_args_list             shift and go to state 110
    expr                           shift and go to state 61
    function_call                  shift and go to state 62
    address_of                     shift and go to state 48

state 90

    (18) print_statement -> PRINT LPAREN expr RPAREN . SEMI

    SEMI            shift and go to state 111


state 91

    (19) if_statement -> IF LPAREN expr RPAREN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> IF LPAREN expr RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 112


state 92

    (21) while_statement -> WHILE LPAREN expr RPAREN . LBRACE statement_list RBRACE
    (22) while_statement -> WHILE LPAREN expr RPAREN . LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE

    LBRACE          shift and go to state 113


state 93

    (45) expr -> expr PLUS expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            reduce using rule 45 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 45 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 45 (expr -> expr PLUS expr .)
    EQ              reduce using rule 45 (expr -> expr PLUS expr .)
    NE              reduce using rule 45 (expr -> expr PLUS expr .)
    LT              reduce using rule 45 (expr -> expr PLUS expr .)
    GT              reduce using rule 45 (expr -> expr PLUS expr .)
    LE              reduce using rule 45 (expr -> expr PLUS expr .)
    GE              reduce using rule 45 (expr -> expr PLUS expr .)
    RSQUARE         reduce using rule 45 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 45 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 45 (expr -> expr PLUS expr .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70

  ! MUL             [ reduce using rule 45 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 45 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! EQ              [ shift and go to state 71 ]
  ! NE              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 75 ]
  ! GE              [ shift and go to state 76 ]


state 94

    (46) expr -> expr MINUS expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            reduce using rule 46 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 46 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 46 (expr -> expr MINUS expr .)
    EQ              reduce using rule 46 (expr -> expr MINUS expr .)
    NE              reduce using rule 46 (expr -> expr MINUS expr .)
    LT              reduce using rule 46 (expr -> expr MINUS expr .)
    GT              reduce using rule 46 (expr -> expr MINUS expr .)
    LE              reduce using rule 46 (expr -> expr MINUS expr .)
    GE              reduce using rule 46 (expr -> expr MINUS expr .)
    RSQUARE         reduce using rule 46 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 46 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 46 (expr -> expr MINUS expr .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70

  ! MUL             [ reduce using rule 46 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 46 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! EQ              [ shift and go to state 71 ]
  ! NE              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 75 ]
  ! GE              [ shift and go to state 76 ]


state 95

    (47) expr -> expr MUL expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            reduce using rule 47 (expr -> expr MUL expr .)
    PLUS            reduce using rule 47 (expr -> expr MUL expr .)
    MINUS           reduce using rule 47 (expr -> expr MUL expr .)
    MUL             reduce using rule 47 (expr -> expr MUL expr .)
    DIV             reduce using rule 47 (expr -> expr MUL expr .)
    EQ              reduce using rule 47 (expr -> expr MUL expr .)
    NE              reduce using rule 47 (expr -> expr MUL expr .)
    LT              reduce using rule 47 (expr -> expr MUL expr .)
    GT              reduce using rule 47 (expr -> expr MUL expr .)
    LE              reduce using rule 47 (expr -> expr MUL expr .)
    GE              reduce using rule 47 (expr -> expr MUL expr .)
    RSQUARE         reduce using rule 47 (expr -> expr MUL expr .)
    COMMA           reduce using rule 47 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 47 (expr -> expr MUL expr .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! EQ              [ shift and go to state 71 ]
  ! NE              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 75 ]
  ! GE              [ shift and go to state 76 ]


state 96

    (48) expr -> expr DIV expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            reduce using rule 48 (expr -> expr DIV expr .)
    PLUS            reduce using rule 48 (expr -> expr DIV expr .)
    MINUS           reduce using rule 48 (expr -> expr DIV expr .)
    MUL             reduce using rule 48 (expr -> expr DIV expr .)
    DIV             reduce using rule 48 (expr -> expr DIV expr .)
    EQ              reduce using rule 48 (expr -> expr DIV expr .)
    NE              reduce using rule 48 (expr -> expr DIV expr .)
    LT              reduce using rule 48 (expr -> expr DIV expr .)
    GT              reduce using rule 48 (expr -> expr DIV expr .)
    LE              reduce using rule 48 (expr -> expr DIV expr .)
    GE              reduce using rule 48 (expr -> expr DIV expr .)
    RSQUARE         reduce using rule 48 (expr -> expr DIV expr .)
    COMMA           reduce using rule 48 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 48 (expr -> expr DIV expr .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! EQ              [ shift and go to state 71 ]
  ! NE              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 75 ]
  ! GE              [ shift and go to state 76 ]


state 97

    (49) expr -> expr EQ expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    SEMI            reduce using rule 49 (expr -> expr EQ expr .)
    RSQUARE         reduce using rule 49 (expr -> expr EQ expr .)
    COMMA           reduce using rule 49 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 49 (expr -> expr EQ expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76

  ! PLUS            [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! NE              [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 49 (expr -> expr EQ expr .) ]


state 98

    (50) expr -> expr NE expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    SEMI            reduce using rule 50 (expr -> expr NE expr .)
    RSQUARE         reduce using rule 50 (expr -> expr NE expr .)
    COMMA           reduce using rule 50 (expr -> expr NE expr .)
    RPAREN          reduce using rule 50 (expr -> expr NE expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76

  ! PLUS            [ reduce using rule 50 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 50 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 50 (expr -> expr NE expr .) ]
  ! DIV             [ reduce using rule 50 (expr -> expr NE expr .) ]
  ! EQ              [ reduce using rule 50 (expr -> expr NE expr .) ]
  ! NE              [ reduce using rule 50 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 50 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 50 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 50 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 50 (expr -> expr NE expr .) ]


state 99

    (51) expr -> expr LT expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    SEMI            reduce using rule 51 (expr -> expr LT expr .)
    RSQUARE         reduce using rule 51 (expr -> expr LT expr .)
    COMMA           reduce using rule 51 (expr -> expr LT expr .)
    RPAREN          reduce using rule 51 (expr -> expr LT expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76

  ! PLUS            [ reduce using rule 51 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 51 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 51 (expr -> expr LT expr .) ]
  ! EQ              [ reduce using rule 51 (expr -> expr LT expr .) ]
  ! NE              [ reduce using rule 51 (expr -> expr LT expr .) ]
  ! LT              [ reduce using rule 51 (expr -> expr LT expr .) ]
  ! GT              [ reduce using rule 51 (expr -> expr LT expr .) ]
  ! LE              [ reduce using rule 51 (expr -> expr LT expr .) ]
  ! GE              [ reduce using rule 51 (expr -> expr LT expr .) ]


state 100

    (52) expr -> expr GT expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    SEMI            reduce using rule 52 (expr -> expr GT expr .)
    RSQUARE         reduce using rule 52 (expr -> expr GT expr .)
    COMMA           reduce using rule 52 (expr -> expr GT expr .)
    RPAREN          reduce using rule 52 (expr -> expr GT expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76

  ! PLUS            [ reduce using rule 52 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 52 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 52 (expr -> expr GT expr .) ]
  ! EQ              [ reduce using rule 52 (expr -> expr GT expr .) ]
  ! NE              [ reduce using rule 52 (expr -> expr GT expr .) ]
  ! LT              [ reduce using rule 52 (expr -> expr GT expr .) ]
  ! GT              [ reduce using rule 52 (expr -> expr GT expr .) ]
  ! LE              [ reduce using rule 52 (expr -> expr GT expr .) ]
  ! GE              [ reduce using rule 52 (expr -> expr GT expr .) ]


state 101

    (53) expr -> expr LE expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    SEMI            reduce using rule 53 (expr -> expr LE expr .)
    RSQUARE         reduce using rule 53 (expr -> expr LE expr .)
    COMMA           reduce using rule 53 (expr -> expr LE expr .)
    RPAREN          reduce using rule 53 (expr -> expr LE expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76

  ! PLUS            [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! DIV             [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! EQ              [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! NE              [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! LT              [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! GT              [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! LE              [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! GE              [ reduce using rule 53 (expr -> expr LE expr .) ]


state 102

    (54) expr -> expr GE expr .
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    SEMI            reduce using rule 54 (expr -> expr GE expr .)
    RSQUARE         reduce using rule 54 (expr -> expr GE expr .)
    COMMA           reduce using rule 54 (expr -> expr GE expr .)
    RPAREN          reduce using rule 54 (expr -> expr GE expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76

  ! PLUS            [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! DIV             [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! EQ              [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! NE              [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! LT              [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! GT              [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! LE              [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! GE              [ reduce using rule 54 (expr -> expr GE expr .) ]


state 103

    (55) expr -> LPAREN expr RPAREN .

    SEMI            reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    RSQUARE         reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 55 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 55 (expr -> LPAREN expr RPAREN .)


state 104

    (39) params -> IDENTIFIER .
    (40) params -> IDENTIFIER . COMMA params

    RPAREN          reduce using rule 39 (params -> IDENTIFIER .)
    COMMA           shift and go to state 114


state 105

    (30) function_decl -> FUNCTION IDENTIFIER LPAREN params . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 115


state 106

    (31) function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 116


state 107

    (41) array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER . expr SEMI
    (42) array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER . SEMI
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    SEMI            shift and go to state 118
    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 117
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 108

    (43) pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN . expr SEMI
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 119
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 109

    (16) assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN . expr SEMI
    (45) expr -> . expr PLUS expr
    (46) expr -> . expr MINUS expr
    (47) expr -> . expr MUL expr
    (48) expr -> . expr DIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NE expr
    (51) expr -> . expr LT expr
    (52) expr -> . expr GT expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . LPAREN expr RPAREN
    (56) expr -> . NUMBER
    (57) expr -> . MINUS expr
    (58) expr -> . MUL expr
    (59) expr -> . QUESTION_MARK IDENTIFIER
    (61) expr -> . STRING
    (62) expr -> . IDENTIFIER
    (63) expr -> . function_call
    (64) expr -> . address_of
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN
    (60) address_of -> . AMPERSAND IDENTIFIER

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 43
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    QUESTION_MARK   shift and go to state 44
    STRING          shift and go to state 46
    IDENTIFIER      shift and go to state 45
    AMPERSAND       shift and go to state 25

    expr                           shift and go to state 120
    function_call                  shift and go to state 47
    address_of                     shift and go to state 48

state 110

    (35) function_args_list -> function_args COMMA function_args_list .

    RPAREN          reduce using rule 35 (function_args_list -> function_args COMMA function_args_list .)


state 111

    (18) print_statement -> PRINT LPAREN expr RPAREN SEMI .

    IDENTIFIER      reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    PRINT           reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    IF              reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    WHILE           reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    RETURN          reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    FUNCTION        reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    ARRAY_TYPE      reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    POINTER_TYPE    reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    AMPERSAND       reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    TOP             reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    BOTTOM          reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    LEFT            reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    RIGHT           reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    TIMESHIFT       reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    $end            reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    RBRACE          reduce using rule 18 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)


state 112

    (19) if_statement -> IF LPAREN expr RPAREN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> IF LPAREN expr RPAREN LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement_list                 shift and go to state 121
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 113

    (21) while_statement -> WHILE LPAREN expr RPAREN LBRACE . statement_list RBRACE
    (22) while_statement -> WHILE LPAREN expr RPAREN LBRACE . statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement_list                 shift and go to state 122
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 114

    (40) params -> IDENTIFIER COMMA . params
    (39) params -> . IDENTIFIER
    (40) params -> . IDENTIFIER COMMA params

    IDENTIFIER      shift and go to state 104

    params                         shift and go to state 123

state 115

    (30) function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 124


state 116

    (31) function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement_list                 shift and go to state 125
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 117

    (41) array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr . SEMI
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            shift and go to state 126
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 118

    (42) array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .

    IDENTIFIER      reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    PRINT           reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    IF              reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    WHILE           reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    RETURN          reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    FUNCTION        reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    ARRAY_TYPE      reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    POINTER_TYPE    reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    AMPERSAND       reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    TOP             reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    BOTTOM          reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    LEFT            reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    RIGHT           reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    TIMESHIFT       reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    $end            reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)
    RBRACE          reduce using rule 42 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI .)


state 119

    (43) pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr . SEMI
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            shift and go to state 127
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 120

    (16) assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr . SEMI
    (45) expr -> expr . PLUS expr
    (46) expr -> expr . MINUS expr
    (47) expr -> expr . MUL expr
    (48) expr -> expr . DIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NE expr
    (51) expr -> expr . LT expr
    (52) expr -> expr . GT expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr

    SEMI            shift and go to state 128
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    EQ              shift and go to state 71
    NE              shift and go to state 72
    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    GE              shift and go to state 76


state 121

    (19) if_statement -> IF LPAREN expr RPAREN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> IF LPAREN expr RPAREN LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    RBRACE          shift and go to state 129
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 122

    (21) while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list . RBRACE
    (22) while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list . RBRACE INSTEAD LBRACE statement_list RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    RBRACE          shift and go to state 130
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 123

    (40) params -> IDENTIFIER COMMA params .

    RPAREN          reduce using rule 40 (params -> IDENTIFIER COMMA params .)


state 124

    (30) function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement_list                 shift and go to state 131
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 125

    (31) function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    RBRACE          shift and go to state 132
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 126

    (41) array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .

    IDENTIFIER      reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    PRINT           reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    IF              reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    WHILE           reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    RETURN          reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    FUNCTION        reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    ARRAY_TYPE      reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    POINTER_TYPE    reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    AMPERSAND       reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    TOP             reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    BOTTOM          reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    LEFT            reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    RIGHT           reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    TIMESHIFT       reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    $end            reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)
    RBRACE          reduce using rule 41 (array_decl -> ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI .)


state 127

    (43) pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .

    IDENTIFIER      reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    PRINT           reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    IF              reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    WHILE           reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    RETURN          reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    FUNCTION        reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    ARRAY_TYPE      reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    POINTER_TYPE    reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    AMPERSAND       reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    TOP             reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    BOTTOM          reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    LEFT            reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    RIGHT           reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    TIMESHIFT       reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    $end            reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)
    RBRACE          reduce using rule 43 (pointer_decl -> POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI .)


state 128

    (16) assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .

    IDENTIFIER      reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    PRINT           reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    IF              reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    WHILE           reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    RETURN          reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    FUNCTION        reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    ARRAY_TYPE      reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    POINTER_TYPE    reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    AMPERSAND       reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    TOP             reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    BOTTOM          reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    LEFT            reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    RIGHT           reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    TIMESHIFT       reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    $end            reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)
    RBRACE          reduce using rule 16 (assignment -> IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI .)


state 129

    (19) if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE
    (20) if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .

    ELSE            shift and go to state 133
    IDENTIFIER      reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    ARRAY_TYPE      reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    POINTER_TYPE    reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    AMPERSAND       reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    TOP             reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    BOTTOM          reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    LEFT            reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    RIGHT           reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    TIMESHIFT       reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 20 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE .)


state 130

    (21) while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .
    (22) while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE . INSTEAD LBRACE statement_list RBRACE

    IDENTIFIER      reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    ARRAY_TYPE      reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    POINTER_TYPE    reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    AMPERSAND       reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    TOP             reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    BOTTOM          reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    LEFT            reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    RIGHT           reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    TIMESHIFT       reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 21 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE .)
    INSTEAD         shift and go to state 134


state 131

    (30) function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    RBRACE          shift and go to state 135
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 132

    (31) function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    ARRAY_TYPE      reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    POINTER_TYPE    reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    AMPERSAND       reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    TOP             reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    BOTTOM          reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    LEFT            reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    RIGHT           reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    TIMESHIFT       reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 31 (function_decl -> FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE .)


state 133

    (19) if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 136


state 134

    (22) while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 137


state 135

    (30) function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    ARRAY_TYPE      reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    POINTER_TYPE    reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    AMPERSAND       reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    TOP             reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    BOTTOM          reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    LEFT            reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    RIGHT           reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    TIMESHIFT       reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 30 (function_decl -> FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE .)


state 136

    (19) if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement_list                 shift and go to state 138
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 137

    (22) while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement_list                 shift and go to state 139
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 138

    (19) if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    RBRACE          shift and go to state 140
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 139

    (22) while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . move_statement
    (10) statement -> . function_decl
    (11) statement -> . array_decl
    (12) statement -> . pointer_decl
    (13) statement -> . address_of
    (14) statement -> . function_call_stmt
    (15) assignment -> . IDENTIFIER ASSIGN expr SEMI
    (16) assignment -> . IDENTIFIER LSQUARE expr RSQUARE ASSIGN expr SEMI
    (17) assignment -> . IDENTIFIER ASSIGN function_call SEMI
    (18) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (19) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (20) if_statement -> . IF LPAREN expr RPAREN LBRACE statement_list RBRACE
    (21) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE
    (22) while_statement -> . WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE
    (23) return_statement -> . RETURN expr SEMI
    (24) move_statement -> . direction SEMI
    (30) function_decl -> . FUNCTION IDENTIFIER LPAREN params RPAREN LBRACE statement_list RBRACE
    (31) function_decl -> . FUNCTION IDENTIFIER LPAREN RPAREN LBRACE statement_list RBRACE
    (41) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER expr SEMI
    (42) array_decl -> . ARRAY_TYPE INTEGER_TYPE OF IDENTIFIER SEMI
    (43) pointer_decl -> . POINTER_TYPE INTEGER_TYPE IDENTIFIER ASSIGN expr SEMI
    (44) pointer_decl -> . POINTER_TYPE IDENTIFIER SEMI
    (60) address_of -> . AMPERSAND IDENTIFIER
    (38) function_call_stmt -> . function_call SEMI
    (25) direction -> . TOP
    (26) direction -> . BOTTOM
    (27) direction -> . LEFT
    (28) direction -> . RIGHT
    (29) direction -> . TIMESHIFT
    (36) function_call -> . IDENTIFIER LPAREN function_args_list RPAREN
    (37) function_call -> . IDENTIFIER LPAREN RPAREN

    RBRACE          shift and go to state 141
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    FUNCTION        shift and go to state 22
    ARRAY_TYPE      shift and go to state 23
    POINTER_TYPE    shift and go to state 24
    AMPERSAND       shift and go to state 25
    TOP             shift and go to state 26
    BOTTOM          shift and go to state 27
    LEFT            shift and go to state 28
    RIGHT           shift and go to state 29
    TIMESHIFT       shift and go to state 30

    statement                      shift and go to state 31
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    move_statement                 shift and go to state 9
    function_decl                  shift and go to state 10
    array_decl                     shift and go to state 11
    pointer_decl                   shift and go to state 12
    address_of                     shift and go to state 13
    function_call_stmt             shift and go to state 14
    function_call                  shift and go to state 16
    direction                      shift and go to state 21

state 140

    (19) if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ARRAY_TYPE      reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    POINTER_TYPE    reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    AMPERSAND       reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    TOP             reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    BOTTOM          reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LEFT            reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RIGHT           reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    TIMESHIFT       reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    $end            reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 19 (if_statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)


state 141

    (22) while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    IF              reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    FUNCTION        reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    ARRAY_TYPE      reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    POINTER_TYPE    reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    AMPERSAND       reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    TOP             reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    BOTTOM          reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    LEFT            reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    RIGHT           reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    TIMESHIFT       reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    $end            reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 22 (while_statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE INSTEAD LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMI in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MUL in state 97 resolved as shift
WARNING: shift/reduce conflict for DIV in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for NE in state 97 resolved as shift
WARNING: shift/reduce conflict for LT in state 97 resolved as shift
WARNING: shift/reduce conflict for GT in state 97 resolved as shift
WARNING: shift/reduce conflict for LE in state 97 resolved as shift
WARNING: shift/reduce conflict for GE in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MUL in state 98 resolved as shift
WARNING: shift/reduce conflict for DIV in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NE in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for LE in state 98 resolved as shift
WARNING: shift/reduce conflict for GE in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MUL in state 99 resolved as shift
WARNING: shift/reduce conflict for DIV in state 99 resolved as shift
WARNING: shift/reduce conflict for EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for NE in state 99 resolved as shift
WARNING: shift/reduce conflict for LT in state 99 resolved as shift
WARNING: shift/reduce conflict for GT in state 99 resolved as shift
WARNING: shift/reduce conflict for LE in state 99 resolved as shift
WARNING: shift/reduce conflict for GE in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MUL in state 100 resolved as shift
WARNING: shift/reduce conflict for DIV in state 100 resolved as shift
WARNING: shift/reduce conflict for EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NE in state 100 resolved as shift
WARNING: shift/reduce conflict for LT in state 100 resolved as shift
WARNING: shift/reduce conflict for GT in state 100 resolved as shift
WARNING: shift/reduce conflict for LE in state 100 resolved as shift
WARNING: shift/reduce conflict for GE in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MUL in state 101 resolved as shift
WARNING: shift/reduce conflict for DIV in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NE in state 101 resolved as shift
WARNING: shift/reduce conflict for LT in state 101 resolved as shift
WARNING: shift/reduce conflict for GT in state 101 resolved as shift
WARNING: shift/reduce conflict for LE in state 101 resolved as shift
WARNING: shift/reduce conflict for GE in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MUL in state 102 resolved as shift
WARNING: shift/reduce conflict for DIV in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NE in state 102 resolved as shift
WARNING: shift/reduce conflict for LT in state 102 resolved as shift
WARNING: shift/reduce conflict for GT in state 102 resolved as shift
WARNING: shift/reduce conflict for LE in state 102 resolved as shift
WARNING: shift/reduce conflict for GE in state 102 resolved as shift
WARNING: reduce/reduce conflict in state 62 resolved using rule (function_args -> function_call)
WARNING: rejected rule (expr -> function_call) in state 62
